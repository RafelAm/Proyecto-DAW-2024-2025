<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/dashboard.css">
    <title>Dashboard</title>
    <link rel="icon" type="image/png" href="/images/logo.png" >
</head>
<body>
    <%- include('partials/header') %>
<div class="dashboard-container">
    <h1 class="dashboard-title">üìä Dashboard de Partidas</h1>

    <!-- Bot√≥n para crear usuario -->
    <button onclick="mostrarDialogoCreacion()" class="create-user-btn">‚ûï Crear Usuario</button>

    <!-- Seleccionar usuario -->
    <label for="player-select" class="dropdown-label">Seleccionar Usuario:</label>
    <select id="player-select" class="dropdown-select" onchange="mostrarDialogo('player', this.value)">
        <option value="">Selecciona un usuario</option>
        <% jugadores.forEach(player => { %>
            <option value="<%= player.id %>"><%= player.nombre %></option>
        <% }) %>
    </select>

    <!-- Seleccionar partida -->
    <label for="game-select" class="dropdown-label">Seleccionar Partida:</label>
    <select id="game-select" class="dropdown-select" onchange="mostrarDialogo('game', this.value)">
        <option value="">Selecciona una partida</option>
        <% partidas.forEach(game => { %>
            <option value="<%= game.id %>">Partida <%= game.id %></option>
        <% }) %>
    </select>

    <!-- Contenedor de los di√°logos -->
    <div class="dialog-container">
        <div id="player-dialog" class="dialog"></div>
        <div id="game-dialog" class="dialog"></div>
        <div id="create-user-dialog" class="dialog" style="display: none;"></div>
    </div>
</div>
<%- include('partials/footer') %>



<script>
    function mostrarDialogo(type, id) {
        if (!id) return;
        // Si es partida, usa el endpoint correcto que devuelve toda la info
        if (type === "game") {
            fetch(`/api/partida/${id}`)
                .then(response => response.json())
                .then(data => {
                    const dialog = document.getElementById("game-dialog");
                    dialog.innerHTML = generarHTMLDialogo(type, data);
                    dialog.style.display = "block";
                })
                .catch(error => console.error("Error al obtener datos:", error));
        } else {
            // Para usuario sigue igual
            fetch(`/get-info/player/${id}`)
                .then(response => response.json())
                .then(data => {
                    const dialog = document.getElementById("player-dialog");
                    dialog.innerHTML = generarHTMLDialogo(type, data);
                    dialog.style.display = "block";
                })
                .catch(error => console.error("Error al obtener datos:", error));
        }
    }
    function mostrarDialogoCreacion() {
        const dialog = document.getElementById("create-user-dialog");
        dialog.innerHTML = `
            <div id="create-user-dialog">
                <h2>Crear Nuevo Usuario</h2>
                <form id="create-form">
                    <label for="nuevo-nombre">Nombre de Usuario:</label>
                    <input type="text" id="nuevo-nombre" name="nuevo-nombre" required >

                    <label for="nuevo-correo">Correo Electr√≥nico:</label>
                    <input type="email" id="nuevo-correo" name="nuevo-correo" required>

                    <p id="error-message" class="error-message" style="display: none; color: red;"></p>

                    <label for="nuevo-password">Contrase√±a:</label>
                    <input type="password" id="nuevo-password" name="nuevo-password" required>

                    <label for="nuevo-dinero">Dinero Inicial:</label>
                    <input type="number" id="nuevo-dinero" name="nuevo-dinero" value="1000">

                    <label for="nuevo-rol">Rol:</label>
                    <select id="nuevo-rol" name="nuevo-rol">
                        <option value="Jugador">Jugador</option>
                        <option value="Administrador">Administrador</option>
                    </select>

                    <div class="button-group">
                        <button type="button" onclick="crearUsuario()" id="crear-btn">‚úÖ Crear</button>
                        <button type="button" onclick="cerrarDialogo('create-user-dialog')" class="close-btn">‚ùå Cerrar</button>
                    </div>
                </form>
            </div>
        `;
        dialog.style.display = "block";
    }

function generarHTMLDialogo(type, data) {
    if (type === "player") {
        return `
            <div id="player-dialog">
                <h2>Modificar Usuario</h2>
                <form id="edit-form">
                    <label for="nombre">Nombre de Usuario:</label>
                    <input type="text" id="nombre" name="nombre" value="${data.nombre}">
                    <button type="button" onclick="guardarNombre(${data.id})" style="margin-bottom:8px;background:#007bff;color:#fff;border:none;border-radius:8px;padding:8px 0;font-weight:600;cursor:pointer;">üíæ Guardar Nombre</button>

                    <label for="correo">Correo Electr√≥nico:</label>
                    <input type="email" id="correo" name="correo" value="${data.correo}" readonly>

                    <label for="dinero">Dinero:</label>
                    <input type="number" id="dinero" name="dinero" value="${data.dinero}">

                    <label for="rol">Rol:</label>
                    <select id="rol" name="rol">
                        <option value="Jugador" ${data.rol === "Jugador" ? "selected" : ""}>Jugador</option>
                        <option value="Administrador" ${data.rol === "Administrador" ? "selected" : ""}>Administrador</option>
                    </select>

                    <div class="button-group">
                        <button type="button" onclick="actualizarUsuario(${data.id})">üí∞ A√±adir Dinero</button>
                        <button type="button" onclick="cambiarRol(${data.id})">üîÑ Cambiar Rol</button>
                        <button type="button" onclick="eliminarUsuario(${data.id})" class="delete-btn">üóëÔ∏è Eliminar</button>
                        <button type="button" onclick="cerrarDialogo('player')" class="close-btn">‚ùå Cerrar</button>
                    </div>
                </form>
                <div id="create-user-container" style="display: none;">
                    <p>Usuario eliminado.</p>
                    <button onclick="crearUsuario()" class="create-btn">‚ûï Crear Nuevo Usuario</button>
                </div>
            </div>
        `;
    } else {
        // --- Informaci√≥n de la partida ---
        let partida = data.partida || {};
        let jugadores = Array.isArray(data.jugadores) ? data.jugadores.filter(j => j != null) : [];
        let estado = jugadores.length > 0 ? "En juego" : "Sin jugadores";
        // Calcula el bote sumando las apuestas de los jugadores
        let bote = jugadores.reduce((acc, j) => acc + (parseFloat(j.apuesta) || 0), 0);

        // Formatea la fecha de la partida
        let fechaPartida = partida.fecha_partida
            ? new Date(partida.fecha_partida).toLocaleString('es-ES', { dateStyle: 'short', timeStyle: 'short' })
            : "-";

        // --- Datos de Partida ---
        let partidaHTML = `
            <div class="dialog-section">
                <h3>üé≤ Datos de Partida</h3>
                <ul>
                    <li><span class="campo">ID:</span> <span class="valor">${partida.id ?? '-'}</span></li>
                    <li><span class="campo">Estado:</span> <span class="valor">${estado}</span></li>
                    <li><span class="campo">Bote:</span> <span class="valor">${bote.toFixed(2)} ‚Ç¨</span></li>
                    <li><span class="campo">Fecha:</span> <span class="valor">${fechaPartida}</span></li>
                    <li><span class="campo">Puntos Crupier:</span> <span class="valor">${partida.puntos_crupier ?? '-'}</span></li>
                    <li><span class="campo">Puntos Jugador 1:</span> <span class="valor">${partida.puntos_jugador_1 ?? '-'}</span></li>
                    <li><span class="campo">Puntos Jugador 2:</span> <span class="valor">${partida.puntos_jugador_2 ?? '-'}</span></li>
                    <li><span class="campo">Puntos Jugador 3:</span> <span class="valor">${partida.puntos_jugador_3 ?? '-'}</span></li>
                </ul>
            </div>`;

        // --- Jugadores ---
        let jugadoresHTML = `<div class="dialog-section jugadores">
            <h3>üë• Jugadores (${jugadores.length})</h3>
            <ul>`;
        jugadores.forEach((j, idx) => {
            // El id lo cogemos de ParticipaEn (j.idUsuario)
            let puntos = partida[`puntos_jugador_${idx + 1}`] ?? '-';
            jugadoresHTML += `<li style="margin-bottom:10px;">
                <ul>
                    <li><span class="campo">Nombre:</span> <span class="valor">${j.nombre ?? '-'}</span></li>
                    <li><span class="campo">ID:</span> <span class="valor">${j.idUsuario ?? '-'}</span></li>
                    <li><span class="campo">Puntos:</span> <span class="valor">${puntos}</span></li>
                    <li><span class="campo">Apuesta:</span> <span class="valor">${j.apuesta ?? '-'}</span></li>
                </ul>
            </li>`;
        });
        jugadoresHTML += `</ul></div>`;

        // --- Crupier ---
        let crupierHTML = "";
        if (data.crupier) {
            // Solo muestra id y puntos
            const { id, puntos } = data.crupier;
            crupierHTML = `<div class="dialog-section crupier">
                <h3>üÉè Crupier</h3>
                <ul>
                    <li><span class="campo">ID:</span> <span class="valor">${id ?? '-'}</span></li>
                    <li><span class="campo">Puntos:</span> <span class="valor">${puntos ?? '-'}</span></li>
                </ul>
            </div>`;
        }

        // --- Baraja ---
        let barajaHTML = `<div class="dialog-section baraja">
            <h3>üÇ° Baraja</h3>
            <div class="baraja-cartas" style="display:flex;gap:4px;flex-wrap:wrap;">`;

        let cartas = [];
        if (Array.isArray(data.baraja) && data.baraja.length > 0) {
            cartas = data.baraja;
        } else if (typeof data.baraja === "object" && data.baraja !== null && Array.isArray(data.baraja.baraja)) {
            cartas = data.baraja.baraja;
        } else if (typeof data.baraja === "string") {
            try {
                let barajaObj = JSON.parse(data.baraja);
                if (Array.isArray(barajaObj.baraja)) {
                    cartas = barajaObj.baraja;
                }
            } catch (e) {
                cartas = [];
            }
        }

        cartas.forEach(carta => {
            // Si es formato {palo, numero, valor}
            let valor = carta.numero ?? carta.valor ?? carta[0] ?? "-";
            let palo = "";
            switch ((carta.palo ?? carta[1] ?? "").toLowerCase()) {
                case "corazones": palo = "‚ô•"; break;
                case "diamantes": palo = "‚ô¶"; break;
                case "picas": palo = "‚ô†"; break;
                case "treboles": palo = "‚ô£"; break;
                default: palo = carta.palo ?? carta[1] ?? ""; break;
            }
            barajaHTML += `<div class="carta" style="border:1px solid #ccc;border-radius:6px;padding:8px 6px;min-width:36px;background:#fff;">
                <span class="valor" style="font-size:1.2em;font-weight:bold;">${valor}${palo}</span>
            </div>`;
        });
        barajaHTML += `</div></div>`;

        // --- Layout principal ---
        return `
            <h2 class="dialog-title">Partida ${partida.id ?? '-'}</h2>
            <div class="dialog-layout">
                ${partidaHTML}
                ${jugadoresHTML}
                <div class="dialog-col">
                    ${crupierHTML}
                </div>
                ${barajaHTML}
            </div>
            <button onclick="cerrarDialogo('game')" class="dialog-close-btn">Cerrar</button>
        `;
    }
}


    function cerrarDialogo(type) {
        // Si es uno de los di√°logos conocidos, usa su id, si no, usa el argumento como id directamente
        let dialogId = "";
        if (type === "player") dialogId = "player-dialog";
        else if (type === "game") dialogId = "game-dialog";
        else dialogId = type; // para 'create-user-dialog' u otros

        const dialog = document.getElementById(dialogId);
        if (dialog) dialog.style.display = "none";
    }

    function actualizarUsuario(userId) {
        const dinero = document.getElementById("dinero").value;
        fetch('/update-user', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId, dinero })
        }).then(response => response.json())
        .then(data => alert(data.message))
        .catch(error => console.error("Error al actualizar:", error));
    }

    function cambiarRol(userId) {
        const rol = document.getElementById("rol").value;
        fetch('/update-role', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId, rol })
        }).then(response => response.json())
        .then(data => alert(data.message))
        .catch(error => console.error("Error al cambiar rol:", error));
    }

function eliminarUsuario(userId) {
    if (!userId) {
        alert("Error: No se proporcion√≥ un ID de usuario.");
        return;
    }

    if (confirm("¬øSeguro que quieres eliminar este usuario?")) {
        fetch('/delete-user', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId }) // Ahora env√≠a el userId correctamente
        }).then(response => response.json())
        .then(data => {
            alert(data.message);
            document.getElementById("player-dialog").style.display = "none";
        })
        .catch(error => console.error("Error al eliminar usuario:", error));
    }
}

function crearUsuario() {
    const nuevoNombre = document.getElementById("nuevo-nombre").value.trim();
    const nuevoCorreo = document.getElementById("nuevo-correo").value.trim();
    const nuevoPassword = document.getElementById("nuevo-password").value.trim();
    const nuevoDinero = parseFloat(document.getElementById("nuevo-dinero").value) || 1000;
    const nuevoRol = document.getElementById("nuevo-rol").value;

    if (!nuevoNombre || !nuevoCorreo || !nuevoPassword) {
        alert("Por favor, ingresa un nombre, un correo y una contrase√±a v√°lida.");
        return;
    }

    fetch('/create-user', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ nombre: nuevoNombre, correo: nuevoCorreo, password: nuevoPassword, dinero: nuevoDinero, rol: nuevoRol })
    }).then(response => response.json())
    .then(data => {
        if (data.error) {
            alert("Error: " + data.error);
        } else {
            alert(data.message);
            cerrarDialogo('create-user');
        }
    })
    .catch(error => console.error("Error al crear usuario:", error));
}

function guardarNombre(userId) {
    const nombre = document.getElementById("nombre").value.trim();
    if (!nombre) {
        alert("El nombre no puede estar vac√≠o.");
        return;
    }
    fetch('/update-name', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, nombre })
    }).then(response => response.json())
    .then(data => alert(data.message))
    .catch(error => console.error("Error al guardar nombre:", error));
}

function cargarCartasPartida(partidaId) {
    if (!partidaId) return;

    fetch(`/api/game/${partidaId}`)
        .then(response => response.json())
        .then(data => {
            let cartasHTML = "";
            if (Array.isArray(data.baraja) && data.baraja.length > 0) {
                cartasHTML = `<div style="display:flex;gap:4px;justify-content:center;flex-wrap:wrap;margin:12px 0;">` +
                    data.baraja.map(carta => `
                        <div style="border:1px solid #ccc;border-radius:6px;padding:8px 6px;min-width:36px;background:#fff;">
                            <span style="font-size:1.2em;font-weight:bold;">${carta.valor || carta[0]}</span>
                            <span style="font-size:1.2em;">${carta.palo || carta[1]}</span>
                        </div>
                    `).join('') +
                    `</div>`;
            } else {
                cartasHTML = `<p>No hay cartas registradas para esta partida.</p>`;
            }

            // Muestra las cartas en el di√°logo de la partida
            const dialog = document.getElementById("game-dialog");
            dialog.innerHTML = `
                <h2>Cartas de la Partida ${data.idPartida || partidaId}</h2>
                ${cartasHTML}
                <button onclick="cerrarDialogo('game')">Cerrar</button>
            `;
            dialog.style.display = "block";
        })
        .catch(error => {
            alert("No se pudieron cargar las cartas de la partida.");
            console.error("Error al cargar cartas:", error);
        });
}
</script>



</body>
</html>