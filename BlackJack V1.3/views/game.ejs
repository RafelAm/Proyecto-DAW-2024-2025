<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/party.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="icon" type="image/png" href="/images/logo.png" >
    <link
      href="https://fonts.googleapis.com/css2?family=Lobster&display=swap"
      rel="stylesheet"
    />
    <title>Partida</title>
  </head>
  <body>
    <%- include('partials/header') %>
    <div class="mesa">
    <div class="zona-crupier">
        <!-- Crupier -->
    </div>
    <div class="zona-jugadores">
        <!-- Jugadores distribuidos alrededor de la mesa -->
    </div>
    <div class="zona-apuestas">
        <!-- Total de apuestas y fichas -->
    </div>
</div>

<div id="chat-container">
    <h2 class="chat-titulo">Chat</h2>
    <ul id="messages"></ul>
    <form id="form" autocomplete="off">
        <input id="input" autocomplete="off" placeholder="Escribe un mensaje..." />
        <button type="submit">Enviar</button>
    </form>
</div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
const socket = io();
let gameStateGlobal;
let currentUsername = "";
let puedeMostrarBotones = false;
const roomId = window.location.pathname.split("/").pop();
let botonesContainerGlobal = null;
let globalBotonesConfig = null;

socket.on("gameState", (gameState) => {
    if (!gameState || !gameState.state) {
        console.error("Error: gameState no está definido correctamente.");
        return;
    }
    gameStateGlobal = gameState;
    currentSocketId = gameState.currentSocketId;
    currentUsername = gameState.currentUsername;
    renderGame(gameState);

    // AÑADE o MANTIENE esto:
    renderTotalApuestas(gameState.state.totalApuestas);

    // Solo muestra el botón de unirse si el usuario NO está en la partida
    const yaEnPartida = gameState.state.jugadores.some(j => j.nombre === currentUsername);
    if (!yaEnPartida) {
        renderizarBotonesInicio(currentUsername);
    } else {
        // Oculta el botón si ya está en la partida
        const btnInicio = document.getElementById("botonesInicio");
        if (btnInicio) btnInicio.style.display = "none";
    }

    // Volver a renderizar botones si están en gameState
    if (gameState.botonesConfig && gameState.botonesConfig.length > 0) {
        globalBotonesConfig = gameState.botonesConfig;
        if (botonesContainerGlobal) {
            renderizarBotones(globalBotonesConfig, botonesContainerGlobal, false);
        }
    }

});








// Mapeo de íconos de los palos (debe estar definido globalmente)
const iconosPalos = {
    "Corazones": "♥",
    "Diamantes": "♦",
    "Treboles": "♣",
    "Picas": "♠"
};


socket.emit("joinRoom", roomId);
// Actualizar la lista de jugadores
socket.on("actualizarJugadores", (jugadores) => {
    const jugadoresLista = document.getElementById("jugadoresLista");
    jugadoresLista.innerHTML = "";

    jugadores.forEach(jugador => {
        const elemento = document.createElement("li");
        elemento.textContent = jugador;
        jugadoresLista.appendChild(elemento);
    });
});
socket.on("mostrarFormularioApuesta", () => {
    if (!gameStateGlobal || !gameStateGlobal.state) {
        console.error("Error: gameStateGlobal no está definido correctamente.");
        return;
    }
    if(gameStateGlobal.currentUsername == currentUsername && gameStateGlobal.state.jugadores){
        const jugadorActual = gameStateGlobal.state.jugadores.find(j => j.nombre === currentUsername);
        if (jugadorActual && jugadorActual.apuesta === 0) {
            renderizarFormularioApuesta(currentUsername);
        } else {
            console.warn("Jugador no encontrado en gameStateGlobal:", currentUsername);
        }


    }
});




// Mostrar botones de acción
socket.on("mostrarBotones", (botonesConfig) => {
    globalBotonesConfig = Array.isArray(botonesConfig) ? botonesConfig : []; // Asegurar que sea un array

    if (botonesContainerGlobal && globalBotonesConfig.length > 0) {
        renderizarBotones(globalBotonesConfig, botonesContainerGlobal, false);
    } else {
        console.warn("No se han recibido botones válidos.");
    }
});



let apuestaActual = 0;
let fichasApostadas = [];

function renderizarFormularioApuesta(jugador) {
    let apuestaContainer = document.getElementById("apuestaContainer");
    if (apuestaContainer) apuestaContainer.remove();

    apuestaContainer = document.createElement("div");
    apuestaContainer.id = "apuestaContainer";
    apuestaContainer.className = "contenedor-apuesta";
    apuestaContainer.style.display = "block";

    apuestaContainer.innerHTML = `
        <div id="fichasContainer">
            <button class="ficha" data-valor="5" title="5 monedas">
                <img src="/images/moneda5.png" class="icono-boton-ficha" alt="5">
            </button>
            <button class="ficha" data-valor="10" title="10 monedas">
                <img src="/images/moneda10.png" class="icono-boton-ficha" alt="10">
            </button>
            <button class="ficha" data-valor="20" title="20 monedas">
                <img src="/images/moneda20.png" class="icono-boton-ficha" alt="20">
            </button>
            <button class="ficha" data-valor="50" title="50 monedas">
                <img src="/images/moneda50.png" class="icono-boton-ficha" alt="50">
            </button>
            <button class="ficha" data-valor="100" title="100 monedas">
                <img src="/images/moneda100.png" class="icono-boton-ficha" alt="100">
            </button>
        </div>
        <div id="apuestaResumen"></div>
        <div class="apuesta-botones">
            <button id="resetApuesta" type="button">
                <i class="fa-solid fa-rotate-left"></i>
            </button>
            <button id="enviarApuesta" type="button">
                <i class="fa-solid fa-check"></i>
            </button>
        </div>
    `;

    // === NUEVO: Insertar dentro del jugador propio ===
    const jugadorBox = document.querySelector('.jugador-box.yo-mismo');
    if (jugadorBox) {
        jugadorBox.insertBefore(apuestaContainer, jugadorBox.firstChild);
    } else {
        // Fallback: si no existe, lo añade al body (no debería pasar)
        document.body.appendChild(apuestaContainer);
    }

    apuestaActual = 0;
    fichasApostadas = [];
    actualizarResumenApuesta();

    document.querySelectorAll(".ficha").forEach(btn => {
        btn.addEventListener("click", () => {
            const valor = parseInt(btn.dataset.valor, 10);
            apuestaActual += valor;
            fichasApostadas.push(valor);
            actualizarResumenApuesta();
        });
    });

    document.getElementById("resetApuesta").onclick = () => {
        apuestaActual = 0;
        fichasApostadas = [];
        actualizarResumenApuesta();
    };

    document.getElementById("enviarApuesta").onclick = () => {
        if (apuestaActual > 0) {
            socket.emit("realizarApuesta", { roomId, monto: apuestaActual, fichas: fichasApostadas, socketId: currentSocketId });
            apuestaContainer.style.display = "none";
        }
    };
}

function actualizarResumenApuesta() {
    const resumen = document.getElementById("apuestaResumen");
    if (!resumen) return;
    if (fichasApostadas.length === 0) {
        resumen.innerHTML = "Apuesta actual: 0";
    } else {
        const conteo = {};
        fichasApostadas.forEach(f => conteo[f] = (conteo[f] || 0) + 1);
        let texto = Object.entries(conteo)
            .map(([valor, cantidad]) => `${cantidad} ficha${cantidad > 1 ? 's' : ''} de ${valor}`)
            .join(", ");
        resumen.innerHTML = `Apuesta actual: ${apuestaActual} (${texto})`;
    }
}

// Renderizar el juego
// Llamar a la función de gestión dentro de `renderGame`
function renderGame(gameState) {
    const mesa = document.querySelector(".mesa");
    mesa.innerHTML = "";

    // Crupier siempre arriba
    const crupier = gameState.state.jugadores.find(j => j.tipo === "Crupier");
    if (crupier) {
        const crupierDiv = crearSillaJugador(crupier, false, gameState);
        crupierDiv.classList.add("zona-crupier");
        mesa.appendChild(crupierDiv);
    }

    // Jugadores
    const jugadores = gameState.state.jugadores.filter(j => j.tipo === "Player");
    const miJugadorIdx = jugadores.findIndex(j => j.nombre === currentUsername);
    let ordenFinal = [];

    if (miJugadorIdx > -1) {
        // Saca al jugador propio
        const [miJugador] = jugadores.splice(miJugadorIdx, 1);
        // Orden: izquierda, centro (yo), derecha
        if (jugadores.length === 0) {
            ordenFinal = [miJugador];
        } else if (jugadores.length === 1) {
            ordenFinal = [jugadores[0], miJugador];
        } else if (jugadores.length === 2) {
            ordenFinal = [jugadores[0], miJugador, jugadores[1]];
        } else {
            // Si hay más de 2 o 3, reparte a los lados (puedes mejorar esto según tu máximo de jugadores)
            const mitad = Math.ceil(jugadores.length / 2);
            ordenFinal = [
                ...jugadores.slice(0, mitad),
                miJugador,
                ...jugadores.slice(mitad)
            ];
        }
    } else {
        ordenFinal = jugadores;
    }

    ordenFinal.forEach((jugador, idx) => {
        const silla = crearSillaJugador(jugador, jugador.socketId === currentSocketId, gameState);

        // Asigna las posiciones absolutas según el orden
        if (jugador.nombre === currentUsername && puedeMostrarBotones) {
            let row = document.createElement("div");
            row.className = "jugador-propio-col";
            silla.classList.add("jugador-pos-2"); // Centro abajo

            // --- NUEVO: Añadir apuestaContainer encima del jugador propio ---
            let apuestaContainer = document.getElementById("apuestaContainer");
            if (apuestaContainer) apuestaContainer.remove(); // Evita duplicados

            // Solo mostrar si corresponde (puedes controlar esto con una variable)
            if (gameState.mostrarFormularioApuesta) {
                apuestaContainer = document.createElement("div");
                apuestaContainer.id = "apuestaContainer";
                apuestaContainer.className = "contenedor-apuesta";
                apuestaContainer.innerHTML = `
                    <div id="fichasContainer">
                        <button class="ficha" data-valor="5"><img src="/images/moneda5.png" class="icono-boton-ficha" alt="5"></button>
                        <button class="ficha" data-valor="10"><img src="/images/moneda10.png" class="icono-boton-ficha" alt="10"></button>
                        <button class="ficha" data-valor="20"><img src="/images/moneda20.png" class="icono-boton-ficha" alt="20"></button>
                        <button class="ficha" data-valor="50"><img src="/images/moneda50.png" class="icono-boton-ficha" alt="50"></button>
                        <button class="ficha" data-valor="100"><img src="/images/moneda100.png" class="icono-boton-ficha" alt="100"></button>
                    </div>
                    <div id="apuestaResumen"></div>
                    <button id="resetApuesta">Resetear</button>
                    <button id="enviarApuesta">Apostar</button>
                `;
                // Inserta el contenedor de apuesta como primer hijo del jugador propio
                silla.insertBefore(apuestaContainer, silla.firstChild);
            }

            row.appendChild(silla);

            let botonesContainer = document.createElement("div");
            botonesContainer.className = "jugador-botones";
            botonesContainerGlobal = botonesContainer;
            row.appendChild(botonesContainer);

            mesa.appendChild(row);

            if (globalBotonesConfig && globalBotonesConfig.length > 0) {
                renderizarBotones(globalBotonesConfig, botonesContainerGlobal, false);
            }
        } else {
            // Rivales: izquierda y derecha
            if (ordenFinal.length === 2) {
                // Solo un rival
                silla.classList.add("jugador-pos-1");
            } else if (ordenFinal.length === 3) {
                if (idx === 0) silla.classList.add("jugador-pos-1"); // Izquierda
                if (idx === 2) silla.classList.add("jugador-pos-3"); // Derecha
            }
            mesa.appendChild(silla);
        }
    });

    renderTotalApuestas(gameState.state.totalApuestas);
    gestionarBotonesInterfaz(gameState);

    // Mostrar el balance del usuario actual fuera del recuadro del jugador
    const miJugador = gameState.state.jugadores.find(j => j.nombre === currentUsername);
    const balanceDiv = document.getElementById("balanceUsuario");
    if (miJugador && balanceDiv) {
        balanceDiv.textContent = `${miJugador.balance ?? 0} monedas`;
    }
}

// Nueva función para crear la silla de cada jugador
function crearSillaJugador(jugador, esMio, gameState) {
    const silla = document.createElement("div");
    silla.classList.add(jugador.tipo, "jugador-box");
    if (esMio) silla.classList.add("yo-mismo");

    let mostrarPuntos = (esMio || gameState.state.reiniciando);

    // --- SOLO muestra las fichas si NO está reiniciando y hay fichas apostadas ---
    let apuestaDiv = "";
    if (
        jugador.tipo === "Player" &&
        !gameState.state.reiniciando && // Si está reiniciando, NO entra aquí
        jugador.fichasApostadas &&
        jugador.fichasApostadas.length > 0
    ) {
        const desglose = Object.entries(
            jugador.fichasApostadas.reduce((acc, f) => {
                acc[f] = (acc[f] || 0) + 1;
                return acc;
            }, {})
        );
        apuestaDiv = `
      <div class="apuesta-encima">
        ${desglose
            .map(
                ([valor, cantidad]) =>
                    `${cantidad}x <img src="/images/moneda${valor}.png" alt="moneda${valor}" class="icono-moneda">`
            )
            .join(' + ')}
      </div>
    `;
    } // Si está reiniciando, apuestaDiv será ""

    silla.innerHTML = `
      ${apuestaDiv}
      <div class="jugador-info-row">
        <div class="jugador-avatar">
          <img src="${
            jugador.tipo === 'Crupier'
              ? '/images/dealer.png'
              : (jugador.imagenPerfil || '/images/default-user.png')
          }" alt="${jugador.tipo}" class="img-${jugador.tipo}">
          <div class="jugador-nombre">${jugador.nombre}</div>
          <div class="apuesta-pequena">Apuesta: ${jugador.apuesta ?? 0}</div>
        </div>
        <div class="jugador-cartas">
          <div class="cartas"></div>
        </div>
      </div>
      <div class="puntos">
        Puntos: ${mostrarPuntos ? jugador.puntaje : "?"}
      </div>
    `;

    // Cartas
    const cartasContainer = silla.querySelector(".cartas");
    jugador.cartas.forEach((carta, index) => {
        const card = document.createElement("div");
        card.classList.add("cards");
        if (gameState.state.reiniciando) {
            card.textContent = `${carta.numero} ${iconosPalos[carta.palo]}`;
        } else if (jugador.tipo === "Crupier" && index === 0) {
            card.textContent = `${carta.numero} ${iconosPalos[carta.palo]}`;
        } else if (esMio) {
            card.textContent = `${carta.numero} ${iconosPalos[carta.palo]}`;
        } else {
            card.textContent = "❓";
        }
        cartasContainer.appendChild(card);
    });

    // Nueva lógica: agregar clase 'jugador-en-turno' si es el turno del jugador
    if (
        gameState.turnoActual !== undefined &&
        gameState.state.jugadores[gameState.turnoActual]?.nombre === jugador.nombre
    ) {
        silla.classList.add("jugador-en-turno");
    }

    return silla;
}
function renderizarBotones(botonesConfig, container, deshabilitado = false) {
    container.innerHTML = "";

    const botones = Array.isArray(botonesConfig) ? botonesConfig : ["btnPedirCarta", "btnPlantarse"];

    botones.forEach((btnId) => {
        const button = document.createElement("button");

        switch (btnId) {
            case "btnPedirCarta":
                button.textContent = "Pedir Carta";
                button.id = "btnPedirCarta";
                button.classList.add("more");
                button.addEventListener("click", () => {
                    socket.emit("requestCard", { roomId });
                    clearInterval(window.turnoCountdownInterval);
                    ocultarNotificacionCentrada();
                });
                break;
            case "btnPlantarse":
                button.textContent = "Plantarse";
                button.id = "btnPlantarse";
                button.classList.add("plant");
                button.addEventListener("click", () => {
                    socket.emit("plantarse", { roomId });
                    clearInterval(window.turnoCountdownInterval);
                    ocultarNotificacionCentrada();
                });
                break;
            default:
                button.textContent = "Botón desconocido";
        }

        if (deshabilitado) {
            button.setAttribute("disabled", true);
        }
        container.appendChild(button);
    });
}


// Renderizar botones de inicio (antes de entrar a la partida)
function renderizarBotonesInicio(usuario) {
    let container = document.getElementById("botonesInicio");

    // Si no existe el elemento, créalo antes de modificarlo
    if (!container) {
        container = document.createElement("div");
        container.id = "botonesInicio";
        document.body.appendChild(container);
            container.innerHTML = ""; // Limpia el contenido previo

    let botonesConfig1 = ["btnUnirsePartida"];

    botonesConfig1.forEach((btnId) => {
        const button = document.createElement("button");

        switch (btnId) {
            case "btnUnirsePartida":
                button.textContent = "Sentarse en la mesa"; // Cambia aquí el texto
                button.classList.add("joinGame");
                button.addEventListener("click", () => {
                    socket.emit("addPlayer", { roomId, username: usuario, socketId: currentSocketId });
                    button.style.display = "none";
                });
                break;
        }

        container.appendChild(button);
    });
    }else{
      if(container.style.display === "none"){
        container.style.display = "block"; // Asegúrate de que el contenedor esté visible
      }    }


}



// Renderizar apuestas
function renderTotalApuestas(totalApuestas) {
    let totalApuestasDiv = document.getElementById("totalApuestas");
    if (!totalApuestasDiv) {
        totalApuestasDiv = document.createElement("div");
        totalApuestasDiv.id = "totalApuestas";
        totalApuestasDiv.className = "total-apuestas-usuario";
        // Inserta justo después del balance
        const balanceDiv = document.getElementById("balanceUsuario");
        if (balanceDiv && balanceDiv.nextSibling) {
            balanceDiv.parentNode.insertBefore(totalApuestasDiv, balanceDiv.nextSibling);
        } else if (balanceDiv) {
            balanceDiv.parentNode.appendChild(totalApuestasDiv);
        } else {
            document.body.appendChild(totalApuestasDiv);
        }
    }
    totalApuestasDiv.innerHTML = `<span class="icono-apuesta">🎲</span> Total apuestas: <b>${totalApuestas}</b> monedas`;
}

      // Escuchar errores enviados desde el servidor
      socket.on("error", (error) => {
        console.error("Error recibido del servidor:", error);
      });

      // Manejar el envío del formulario de apuesta
      const betForm = document.getElementById("betForm");
       if (betForm) {
      betForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const monto = Number(document.getElementById("betAmount").value);
        // Emitir el evento 'realizarApuesta' con el monto introducido
        socket.emit("realizarApuesta", { roomId, monto, socketId: currentSocketId });
        // Opcional: ocultar el formulario de apuesta una vez enviada
        document.getElementById("apuestaContainer").style.display = "none";
      });
    }else {
        console.warn("El formulario de apuestas no existe todavía.");
    }
      // Escuchar el evento de iniciar cuenta desde el servidor
      socket.on("iniciarCuenta", (duracion) => {
puedeMostrarBotones = false; // <--- Añade esto

        let fase = (duracion === 20) ? "apostar" : "unirse";
        let mensaje = (fase === "apostar")
            ? "Tiempo restante para apostar: "
            : "Tiempo restante para unirse: ";

        let segundosRestantes = duracion;

        // Limpia cualquier countdown anterior
        if (window.countdownInterval) clearInterval(window.countdownInterval);
    });

      socket.on("cuentaFinalizada", (mensaje) => {

    // Vuelve a renderizar para mostrar los botones si es necesario
    renderGame(gameStateGlobal);
});

socket.on("bloquearAcciones", (bloquear) => {
    // Bloquear botones de acción
    ["btnPedirCarta", "btnPlantarse", "joinGame"].forEach((btnId) => {
        const boton = document.getElementById(btnId);
        if (boton) boton.disabled = true;
    });

    // Bloquear o mostrar el formulario de apuestas
    const betForm = document.getElementById("betForm");
    if (betForm) betForm.style.display = bloquear ? "none" : "block";

});

// Gestionar botones de acción
function gestionarBotonesInterfaz(gameState) {
    if (!botonesContainerGlobal) return;
    const turnoActual = gameState.turnoActual;
    const jugadorEnTurno = gameState.state.jugadores[turnoActual];
    const esMiTurno = jugadorEnTurno && jugadorEnTurno.nombre === currentUsername;
    const partidaEnCurso = !gameState.state.reiniciando && !gameState.state.countDown;

    if (esMiTurno && partidaEnCurso) {
        renderizarBotones(['btnPedirCarta', 'btnPlantarse'], botonesContainerGlobal, false);
    } else {
        renderizarBotones([], botonesContainerGlobal, false);
    }
}

    socket.on("mostrarBotonUnirse", () => {
    renderizarBotonesInicio(currentUsername);
});

socket.on("info", (msg) => {
    alert(msg); 
});

// Función reutilizable para mostrar notificaciones centradas y bonitas
function mostrarNotificacionCentrada(texto) {
    // Elimina cualquier notificación anterior
    let notif = document.getElementById("notificacionCentrada");
    if (notif) notif.remove();

    notif = document.createElement("div");
    notif.id = "notificacionCentrada";
    notif.className = "notificacion-centrada";
    notif.innerHTML = texto;

    // Inserta dentro de la mesa
    const mesa = document.querySelector(".mesa");
    if (mesa) {
        mesa.appendChild(notif);
    } else {
        document.body.appendChild(notif); // Fallback
    }
}

function ocultarNotificacionCentrada() {
    let notif = document.getElementById("notificacionCentrada");
    if (notif) notif.style.display = "none";
}

// Notificación de cuenta atrás
socket.on("iniciarCuenta", (duracion) => {
    let fase = (duracion === 20) ? "apostar" : "unirse";
    let mensaje = (fase === "apostar")
        ? "Tiempo restante para apostar: "
        : "Tiempo restante para unirse: ";

    let segundosRestantes = duracion;
    mostrarNotificacionCentrada(`${mensaje}<span class="timer-num">${segundosRestantes}</span> segundos.`);

    if (window.countdownInterval) clearInterval(window.countdownInterval);

    window.countdownInterval = setInterval(() => {
        segundosRestantes--;
        if (segundosRestantes <= 0) {
            clearInterval(window.countdownInterval);
            mostrarNotificacionCentrada(
                (fase === "apostar")
                    ? "El tiempo para apostar ha finalizado."
                    : "El tiempo para unirse ha finalizado."
            );
            setTimeout(ocultarNotificacionCentrada, 2000);
        } else {
            mostrarNotificacionCentrada(`${mensaje}<span class="timer-num">${segundosRestantes}</span> segundos.`);
        }
    }, 1000);
});

socket.on("cuentaFinalizada", (mensaje) => {
    mostrarNotificacionCentrada(mensaje);
    puedeMostrarBotones = true;
    setTimeout(ocultarNotificacionCentrada, 2000);
    renderGame(gameStateGlobal);
});

// Nueva notificación para el inicio del turno
socket.on("turnoIniciado", ({ tiempo }) => {
    mostrarNotificacionCentrada(
        `¡Es tu turno! Tienes <span class="timer-num">${tiempo}</span> segundos para jugar.`
    );

    let segundosRestantes = tiempo;
    if (window.turnoCountdownInterval) clearInterval(window.turnoCountdownInterval);

    window.turnoCountdownInterval = setInterval(() => {
        segundosRestantes--;
        if (segundosRestantes <= 0) {
            clearInterval(window.turnoCountdownInterval);
            mostrarNotificacionCentrada("¡Se acabó tu tiempo!");
            setTimeout(ocultarNotificacionCentrada, 2000);
        } else {
            mostrarNotificacionCentrada(
                `¡Es tu turno! Tienes <span class="timer-num">${segundosRestantes}</span> segundos para jugar.`
            );
        }
    }, 1000);
});

document.getElementById("btnPedirCarta")?.addEventListener("click", () => {
    clearInterval(window.turnoCountdownInterval);
    ocultarNotificacionCentrada();
});
document.getElementById("btnPlantarse")?.addEventListener("click", () => {
    clearInterval(window.turnoCountdownInterval);
    ocultarNotificacionCentrada();
});

// Asegura que el div de balance existe
function asegurarBalanceUsuario() {
    if (!document.getElementById("balanceUsuario")) {
        const balanceDiv = document.createElement("div");
        balanceDiv.id = "balanceUsuario";
        balanceDiv.className = "balance-usuario";
        document.body.appendChild(balanceDiv);
    }
}
asegurarBalanceUsuario();

socket.on("expulsadoInactividad", ({ mensaje }) => {
    mostrarNotificacionCentrada(mensaje);
    setTimeout(ocultarNotificacionCentrada, 4000);
    // Opcional: puedes recargar la página o redirigir si quieres sacar al usuario de la mesa
    // location.reload();
});

socket.on("mostrarGanadores", ({ ganadores }) => {
    // Quita coronas antiguas
    document.querySelectorAll('.corona-ganador').forEach(el => el.remove());

    document.querySelectorAll('.jugador-box').forEach(box => {
        const nombre = box.querySelector('.jugador-nombre')?.textContent;
        if (ganadores.includes(nombre)) {
            const avatar = box.querySelector('.jugador-avatar');
            if (avatar && !avatar.querySelector('.corona-ganador')) {
                const corona = document.createElement('span');
                corona.className = 'corona-ganador';
                corona.innerHTML = '👑';
                avatar.style.position = "relative";
                corona.style.position = "absolute";
                corona.style.top = "-38px"; // Más arriba
                corona.style.left = "50%";
                corona.style.transform = "translateX(-50%)";
                corona.style.fontSize = "3.2em"; // Más grande
                corona.style.zIndex = "10";
                avatar.appendChild(corona);
            }
        }
    });

    // Mostrar mensaje de reinicio
    mostrarNotificacionCentrada(
        `<span">
        ${ganadores.map(n => '👑 ' + n).join(', ')}
        Partida reiniciándose...
    </span>`
    );
});

// Chat mejorado
const chatForm = document.getElementById("form");
const chatInput = document.getElementById("input");
const chatMessages = document.getElementById("messages");

chatForm.addEventListener("submit", function (e) {
    e.preventDefault();
    const msg = chatInput.value.trim();
    if (msg.length > 0) {
        socket.emit("chat message", { roomId, message: msg, username: currentUsername });
        chatInput.value = "";
    }
});

socket.on("chat message", ({ username, message }) => {
    const li = document.createElement("li");
    li.className = "chat-message";
    li.innerHTML = `<span class="chat-user">${username}:</span> <span class="chat-text">${message}</span>`;
    chatMessages.appendChild(li);
    chatMessages.scrollTop = chatMessages.scrollHeight;
});
    </script>
  </body>
</html>
