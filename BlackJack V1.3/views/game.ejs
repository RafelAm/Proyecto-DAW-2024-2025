<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/party.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">
    <title>Pruebas</title>
</head>
<body>
    
    <div class="mesa">

    </div>
        <button id="addPlayerButton">Añadir Jugador</button>

    <!--<h1>Chat</h1>
    <ul id="messages"></ul>
    <form id="form" action="">
        <input id="input" autocomplete="off" />
        <button>Enviar</button>
    </form>-->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        
        // Obtener el ID de la sala desde la URL
        const roomId = window.location.pathname.split('/').pop();
        
        // Variables globales
        let botonesContainerGlobal = null;
        let currentUsername = "";
        let globalBotonesConfig = null;  // Configuración de botones recibida desde el servidor
        
        // Unirse a la sala
        socket.emit('joinRoom', roomId);
        
        socket.on('gameState', (gameState) => {
    currentUsername = gameState.currentUsername || currentUsername;
    console.log('Estado del juego recibido:', gameState);

    // Renderizar la mesa y los jugadores
    renderGame(gameState);

    // Si hay un contenedor de botones y una configuración global de botones, renderizar los botones
    if (botonesContainerGlobal && globalBotonesConfig) {
        renderizarBotones(globalBotonesConfig, botonesContainerGlobal, false);
    }

    // Mostrar el total de apuestas en la partida
    renderTotalApuestas(gameState.state.totalApuestas);

    // Agregar el listener al botón "Añadir jugador"
    addP(gameState);

    // Si la partida ha sido reiniciada o el total de apuestas es 0, mostrar el formulario de apuestas
    if (gameState.state.reiniciada || gameState.state.totalApuestas === 0) {
        renderizarFormularioApuesta();
    }

    // Obtener el índice del jugador en turno
    const turnoActual = gameState.state.turnoActual;
    const jugadorEnTurno = gameState.state.jugadores[turnoActual];

    // Determinar si el usuario es el jugador en turno
    const esMiTurno = jugadorEnTurno.nombre === currentUsername;

    // Bloquear los botones para todos los jugadores primero
    document.getElementById('btnPedirCarta').disabled = true;
    document.getElementById('btnPlantarse').disabled = true;

    // Solo habilitar los botones para el jugador en turno
    if (esMiTurno && !jugadorEnTurno.plant) {
        document.getElementById('btnPedirCarta').disabled = false;
        document.getElementById('btnPlantarse').disabled = false;
    }
});




        
        // Escuchar la configuración de botones enviada por el servidor
        socket.on('mostrarBotones', (botonesConfig) => {
          console.log("Configuración de botones recibida:", botonesConfig);
          globalBotonesConfig = botonesConfig;  // Guardarla de forma global.
          // Si ya contamos con el contenedor en el DOM, renderizar allí los botones.
          if (botonesContainerGlobal) {
            renderizarBotones(botonesConfig, botonesContainerGlobal, false);
          }
        });

        //mostrar form cuando acaba la partida
        socket.on('mostrarFormularioApuesta', () => {
            console.log("Mostrando formulario de apuesta...");
            renderizarFormularioApuesta();
        });

        function renderizarFormularioApuesta() {
    let apuestaContainer = document.getElementById("apuestaContainer");
    if (!apuestaContainer) {
        apuestaContainer = document.createElement("div");
        apuestaContainer.id = "apuestaContainer";
        apuestaContainer.innerHTML = `
            <form id="betForm">
                <input type="number" id="betAmount" placeholder="Ingrese su apuesta" required>
                <button type="submit">Apostar</button>
            </form>
        `;
        document.body.appendChild(apuestaContainer);
    } else {
        apuestaContainer.style.display = "block";
    }

    // **Evitar múltiples eventos** eliminando el anterior antes de añadirlo
    const betForm = document.getElementById("betForm");
    betForm.removeEventListener("submit", handleBetSubmit);
    betForm.addEventListener("submit", handleBetSubmit);
    }

    function handleBetSubmit(e) {
        e.preventDefault();
        const monto = Number(document.getElementById("betAmount").value);
        socket.emit('realizarApuesta', { roomId, monto });
        document.getElementById('apuestaContainer').style.display = 'none';
    }


        
        // Función para renderizar el estado del juego
        function renderGame(gameState) {
        const mesa = document.querySelector(".mesa");
        mesa.innerHTML = ""; // Limpiar la mesa

        gameState.state.jugadores.forEach((jugador) => {
            const silla = document.createElement("div");
            silla.classList.add(jugador.tipo);
            if(jugador.tipo === "Player") {
                silla.innerHTML = `
                <div class="info">
                    <p class="name">${jugador.nombre}</p>
                    <p class="puntos">Puntos: ${jugador.puntaje}</p>
                    <p class="apuesta">Apuesta: ${jugador.apuesta} monedas</p>
                </div>
                <div class="cartas"></div>
            `;
            } else if (jugador.tipo === "Crupier") {
                silla.innerHTML = `
                <div class="info">
                    <p class="name">${jugador.nombre}</p>
                    <p class="puntos">Puntos: ${jugador.puntaje}</p>
                </div>
                <div class="cartas"></div>
            `;
            }


            const cartasContainer = silla.querySelector(".cartas");
            if (cartasContainer && Array.isArray(jugador.cartas)) {
                jugador.cartas.forEach((carta) => {
                    const card = document.createElement("div");
                    card.classList.add("cards");
                    card.textContent = carta.Número;
                    cartasContainer.appendChild(card);
                });
            }
            
            if (jugador.tipo === "Player" && jugador.nombre === currentUsername) {
                const botonesContainer = document.createElement("div");
                botonesContainer.classList.add("botones-container");
                botonesContainerGlobal = botonesContainer;
                silla.appendChild(botonesContainer);

                // Verificar si el jugador se plantó, en ese caso deshabilitamos los botones.
                renderizarBotones(globalBotonesConfig || ["btnPedirCarta", "btnPlantarse"], botonesContainer, jugador.plant);
            }

            mesa.appendChild(silla);
        });

        // Mostrar total de apuestas en la partida
        const totalApuestasDiv = document.getElementById("totalApuestas");
        if (!totalApuestasDiv) {
            const totalApuestasContainer = document.createElement("div");
            totalApuestasContainer.id = "totalApuestas";
            totalApuestasContainer.innerHTML = `<p>Total Apuestas en la Partida: ${gameState.state.totalApuestas} monedas</p>`;
            document.body.appendChild(totalApuestasContainer);
        } else {
            totalApuestasDiv.innerHTML = `<p>Total Apuestas en la Partida: ${gameState.state.totalApuestas} monedas</p>`;
        }
    }     
        // Función para renderizar los botones en el contenedor del usuario actual.
        // Si "deshabilitado" es true, se deshabilitan los botones.
        function renderizarBotones(botonesConfig, container, deshabilitado = false) {
            container.innerHTML = "";
            const botones = botonesConfig || ["btnPedirCarta", "btnPlantarse"]; // Fallback
            botones.forEach(btnId => {
                const button = document.createElement("button");

                switch (btnId) {
                    case "btnPedirCarta":
                        button.textContent = "Pedir Carta";
                        button.id = "btnPedirCarta";
                        button.classList.add("more");
                        button.addEventListener("click", () => socket.emit('requestCard', { roomId }));
                        break;
                    case "btnPlantarse":
                        button.textContent = "Plantarse";
                        button.id = "btnPlantarse";
                        button.classList.add("plant");
                        button.addEventListener("click", () => socket.emit('plantarse', { roomId }));
                        break;
                    case "btnUnirsePartida":
                        button.textContent = "Unirse a la partida";
                        button.classList.add("joinGame");
                        button.addEventListener("click", () => socket.emit('addPlayer', { roomId, username: currentUsername }));
                        break;
                    default:
                        console.warn("Identificador de botón no reconocido:", btnId);
                        button.textContent = "Botón desconocido";
                }
                if (deshabilitado) {
                    button.setAttribute("disabled", true);
                }
                container.appendChild(button);
            });
        }
                function renderTotalApuestas(totalApuestas) {
            let totalApuestasDiv = document.getElementById("totalApuestas");
            if (!totalApuestasDiv) {
                totalApuestasDiv = document.createElement("div");
                totalApuestasDiv.id = "totalApuestas";
                document.body.appendChild(totalApuestasDiv);
            }
            totalApuestasDiv.innerHTML = `<p>Total Apuestas en la Partida: ${totalApuestas} monedas</p>`;
        }
        // Función para deshabilitar el botón de "Añadir jugador"
        function disableAdd() {
          const addP = document.getElementById("addPlayerButton");
          addP.setAttribute("hidden", true);
        }
        // Función para agregar el listener al botón "Añadir jugador"
        function addP(gameState) {
          const addPlayerButton = document.getElementById("addPlayerButton");
          addPlayerButton.addEventListener("click", () => {
            if (currentUsername) {
              socket.emit('addPlayer', { roomId, username: currentUsername });
              disableAdd();
            }
          });
        }
        /* --- Otras funcionalidades (por ejemplo, chat) --- */
        // Escuchar el color enviado desde el servidor
        socket.on('setBackground', (color) => {
          document.body.style.backgroundColor = color;
        });
        // IMPLEMENTACIÓN: Contenedor y botón para finalizar la ronda
        const finalRoundContainer = document.createElement("div");
        finalRoundContainer.classList.add("finalRoundContainer");
        // Botón para finalizar la ronda
        const btnFinalRound = document.createElement("button");
        btnFinalRound.id = "btnFinalRound";
        btnFinalRound.textContent = "Finalizar Ronda";
        btnFinalRound.addEventListener("click", () => {
          // Emitir el evento 'finalRound' al servidor
          socket.emit('finalRound', { roomId });
        });
        finalRoundContainer.appendChild(btnFinalRound);
        document.body.appendChild(finalRoundContainer);
        // Escuchar el evento 'gameEnd' para notificar el fin de la ronda al usuario
        socket.on('gameEnd', () => {
          console.log("La ronda ha finalizado y se han distribuido los premios.");
        });
        // Escuchar errores enviados desde el servidor
        socket.on('error', (error) => {
          console.error("Error recibido del servidor:", error);
        });
        // Manejar el envío del formulario de apuesta
        const betForm = document.getElementById("betForm");
        betForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const monto = Number(document.getElementById("betAmount").value);
        // Emitir el evento 'realizarApuesta' con el monto introducido
        socket.emit('realizarApuesta', { roomId, monto });
        // Opcional: ocultar el formulario de apuesta una vez enviada
        document.getElementById('apuestaContainer').style.display = 'none';
        });
        // Escuchar confirmación de apuesta o errores
        socket.on('apuestaRealizada', (data) => {
        console.log("Apuesta realizada. Nuevo balance:", data.balance);
        // Actualiza la interfaz, p.ej., mostrar el balance actualizado.
        });
      </script>
        
      
      

</body>
</html>
