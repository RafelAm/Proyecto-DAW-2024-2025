<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/party.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lobster&display=swap"
      rel="stylesheet"
    />
    <title>Pruebas</title>
  </head>
  <body>
    <%- include('partials/header') %>
    <img class="tbl" src="/images/table.png" alt="Mesa de póker">
    <div class="mesa">
    </div>

    
    <!--<h1>Chat</h1>
    <ul id="messages"></ul>
    <form id="form" action="">
        <input id="input" autocomplete="off" />
        <button>Enviar</button>
    </form>-->
    <script src="/socket.io/socket.io.js"></script>
    <script>
const socket = io();
let gameStateGlobal;
let currentUsername = "";
// Actualizar el estado del juego
socket.on("gameState", (gameState) => {
    if (!gameState || !gameState.state) {
        console.error("Error: gameState no está definido correctamente.");
        return;
    }

    gameStateGlobal = gameState;
    currentSocketId = gameState.currentSocketId;
    currentUsername = gameState.currentUsername;

    renderGame(gameState);
    renderizarBotonesInicio(currentUsername);

    // Volver a renderizar botones si están en gameState
    if (gameState.botonesConfig && gameState.botonesConfig.length > 0) {
        globalBotonesConfig = gameState.botonesConfig;
        if (botonesContainerGlobal) {
            renderizarBotones(globalBotonesConfig, botonesContainerGlobal, false);
        }
    }
});








// Mapeo de íconos de los palos (debe estar definido globalmente)
const iconosPalos = {
    "Corazones": "♥",
    "Diamantes": "♦",
    "Treboles": "♣",
    "Picas": "♠"
};
const roomId = window.location.pathname.split("/").pop();
let botonesContainerGlobal = null;
let globalBotonesConfig = null;

socket.emit("joinRoom", roomId);
// Actualizar la lista de jugadores
socket.on("actualizarJugadores", (jugadores) => {
    const jugadoresLista = document.getElementById("jugadoresLista");
    jugadoresLista.innerHTML = "";

    jugadores.forEach(jugador => {
        const elemento = document.createElement("li");
        elemento.textContent = jugador;
        jugadoresLista.appendChild(elemento);
    });
});
socket.on("mostrarFormularioApuesta", () => {
    if (!gameStateGlobal || !gameStateGlobal.state) {
        console.error("Error: gameStateGlobal no está definido correctamente.");
        return;
    }
    if(gameStateGlobal.currentUsername == currentUsername && gameStateGlobal.state.jugadores){
        const jugadorActual = gameStateGlobal.state.jugadores.find(j => j.nombre === currentUsername);
        if (jugadorActual && jugadorActual.apuesta === 0) {
            renderizarFormularioApuesta(currentUsername);
        } else {
            console.warn("Jugador no encontrado en gameStateGlobal:", currentUsername);
        }


    }
});




// Mostrar botones de acción
socket.on("mostrarBotones", (botonesConfig) => {
    globalBotonesConfig = Array.isArray(botonesConfig) ? botonesConfig : []; // Asegurar que sea un array

    if (botonesContainerGlobal && globalBotonesConfig.length > 0) {
        renderizarBotones(globalBotonesConfig, botonesContainerGlobal, false);
    } else {
        console.warn("No se han recibido botones válidos.");
    }
});



let apuestaActual = 0;
let fichasApostadas = [];

function renderizarFormularioApuesta(jugador) {
    let apuestaContainer = document.getElementById("apuestaContainer");
    if (!apuestaContainer) {
        apuestaContainer = document.createElement("div");
        apuestaContainer.id = "apuestaContainer";
        document.body.appendChild(apuestaContainer);
    }
    apuestaContainer.style.display = "block";

    apuestaContainer.innerHTML = `
        <div id="fichasContainer">
            <button class="ficha" data-valor="5">5</button>
            <button class="ficha" data-valor="10">10</button>
            <button class="ficha" data-valor="20">20</button>
            <button class="ficha" data-valor="50">50</button>
            <button class="ficha" data-valor="100">100</button>
        </div>
        <div id="apuestaResumen"></div>
        <button id="resetApuesta">Resetear</button>
        <button id="enviarApuesta">Apostar</button>
    `;

    apuestaActual = 0;
    fichasApostadas = [];
    actualizarResumenApuesta();

    document.querySelectorAll(".ficha").forEach(btn => {
        btn.addEventListener("click", () => {
            const valor = parseInt(btn.dataset.valor, 10);
            apuestaActual += valor;
            fichasApostadas.push(valor);
            actualizarResumenApuesta();
        });
    });

    document.getElementById("resetApuesta").onclick = () => {
        apuestaActual = 0;
        fichasApostadas = [];
        actualizarResumenApuesta();
    };

    document.getElementById("enviarApuesta").onclick = () => {
        if (apuestaActual > 0) {
            socket.emit("realizarApuesta", { roomId, monto: apuestaActual, fichas: fichasApostadas, socketId: currentSocketId });
            apuestaContainer.style.display = "none";
        }
    };
}

function actualizarResumenApuesta() {
    const resumen = document.getElementById("apuestaResumen");
    if (!resumen) return;
    if (fichasApostadas.length === 0) {
        resumen.innerHTML = "Apuesta actual: 0";
    } else {
        const conteo = {};
        fichasApostadas.forEach(f => conteo[f] = (conteo[f] || 0) + 1);
        let texto = Object.entries(conteo)
            .map(([valor, cantidad]) => `${cantidad} ficha${cantidad > 1 ? 's' : ''} de ${valor}`)
            .join(", ");
        resumen.innerHTML = `Apuesta actual: ${apuestaActual} (${texto})`;
    }
}

// Renderizar el juego
// Llamar a la función de gestión dentro de `renderGame`
function renderGame(gameState) {
    const mesa = document.querySelector(".mesa");
    mesa.innerHTML = "";

    // Separa tu jugador de los demás
    const jugadores = gameState.state.jugadores;
    const miJugador = jugadores.find(j => j.socketId === currentSocketId);
    const otrosJugadores = jugadores.filter(j => j.socketId !== currentSocketId);

    // Renderiza primero tu propio jugador
    if (miJugador) {
        const silla = crearSillaJugador(miJugador, true, gameState);
        mesa.appendChild(silla);
    }

    // Renderiza los demás jugadores
    otrosJugadores.forEach(jugador => {
        const silla = crearSillaJugador(jugador, false, gameState);
        mesa.appendChild(silla);
    });

    renderTotalApuestas(gameState.state.totalApuestas);
    gestionarBotonesInterfaz(gameState);
}

// Nueva función para crear la silla de cada jugador
function crearSillaJugador(jugador, esMio, gameState) {
    const silla = document.createElement("div");
    silla.classList.add(jugador.tipo);

    // Ilumina si es el turno de este jugador
    if (gameState.turnoActual !== undefined && gameState.state.jugadores[gameState.turnoActual]?.nombre === jugador.nombre) {
        silla.classList.add("jugador-en-turno");
    }

    if (esMio) {
        silla.classList.add("yo-mismo");
    }

    silla.innerHTML = `
        <div class="info">
            <div class="personal-container">
                <p class="name">${jugador.nombre}</p>
                <img src="${
    jugador.tipo === 'Crupier'
        ? '/images/dealer.png'
        : (jugador.imagenPerfil || '/images/default-user.png')
}" alt="${jugador.tipo}" class="img-${jugador.tipo}">
            </div>
            <p class="puntos">
                Puntos: ${(gameState.state.reiniciando || jugador.socketId === currentSocketId) ? jugador.puntaje : "?"}
            </p>
            ${jugador.tipo === "Player" ? `
                <p class="apuesta">Apuesta: ${jugador.apuesta} monedas</p>
                ${jugador.fichasApostadas && jugador.fichasApostadas.length > 0
                    ? `<p class="fichas">Fichas: ${
                        Object.entries(jugador.fichasApostadas.reduce((acc, f) => {
                            acc[f] = (acc[f] || 0) + 1; return acc;
                        }, {})).map(([valor, cantidad]) => `${cantidad}x${valor}`).join(", ")
                    }</p>`
                    : ""
                }
            ` : ""}
        </div>
        <div class="cartas"></div>
    `;

    const cartasContainer = silla.querySelector(".cartas");
    jugador.cartas.forEach((carta, index) => {
        const card = document.createElement("div");
        card.classList.add("cards");

        // Mostrar todas las cartas si la partida está en reinicio (ronda finalizada)
        if (gameState.state.reiniciando) {
            card.textContent = `${carta.numero} ${iconosPalos[carta.palo]}`;
        }
        // Si el jugador es el usuario actual, muestra todas sus cartas
        else if (jugador.socketId === currentSocketId) {
            card.textContent = `${carta.numero} ${iconosPalos[carta.palo]}`;
        }
        // Si es el crupier, solo muestra la primera carta
        else if (jugador.tipo === "Crupier" && index === 0) {
            card.textContent = `${carta.numero} ${iconosPalos[carta.palo]}`;
        }
        // Oculta las cartas de los demás jugadores
        else {
            card.textContent = "❓";
        }

        cartasContainer.appendChild(card);
    });


    if (jugador.tipo === "Player" && jugador.nombre === currentUsername && gameState.state.empezada) {
        let botonesContainer = silla.querySelector(".botones-container");
        if (!botonesContainer) {
            botonesContainer = document.createElement("div");
            botonesContainer.classList.add("botones-container");
            silla.appendChild(botonesContainer);
        }
        botonesContainerGlobal = botonesContainer;
        renderizarBotones(["btnPedirCarta", "btnPlantarse"], botonesContainerGlobal, jugador.plant);
    }

    return silla;
}
function renderizarBotones(botonesConfig, container, deshabilitado = false) {
    container.innerHTML = "";

    // Validación: Si `botonesConfig` no es un array, asignamos botones por defecto
    const botones = Array.isArray(botonesConfig) ? botonesConfig : ["btnPedirCarta", "btnPlantarse"];

    botones.forEach((btnId) => {
        const button = document.createElement("button");

        switch (btnId) {
            case "btnPedirCarta":
                button.textContent = "Pedir Carta";
                button.id = "btnPedirCarta";
                button.classList.add("more");
                button.addEventListener("click", () => socket.emit("requestCard", { roomId }));
                break;
            case "btnPlantarse":
                button.textContent = "Plantarse";
                button.id = "btnPlantarse";
                button.classList.add("plant");
                button.addEventListener("click", () => socket.emit("plantarse", { roomId }));
                break;
            default:
                console.warn("Identificador de botón no reconocido:", btnId);
                button.textContent = "Botón desconocido";
        }

        if (deshabilitado) {
            button.setAttribute("disabled", true);
        }
        container.appendChild(button);
    });
}


// Renderizar botones de inicio (antes de entrar a la partida)
function renderizarBotonesInicio(usuario) {
    let container = document.getElementById("botonesInicio");

    // Si no existe el elemento, créalo antes de modificarlo
    if (!container) {
        container = document.createElement("div");
        container.id = "botonesInicio";
        document.body.appendChild(container);
            container.innerHTML = ""; // Limpia el contenido previo

    let botonesConfig1 = ["btnUnirsePartida"];

    botonesConfig1.forEach((btnId) => {
        const button = document.createElement("button");

        switch (btnId) {
            case "btnUnirsePartida":
                button.textContent = "Unirse a la partida";
                button.classList.add("joinGame");
                button.addEventListener("click", () => {
                    socket.emit("addPlayer", { roomId, username: usuario, socketId: currentSocketId });
                    button.style.display = "none"; // Oculta el botón tras unirse
                });
                break;
        }

        container.appendChild(button);
    });
    }else{
      if(container.style.display === "none"){
        container.style.display = "block"; // Asegúrate de que el contenedor esté visible
      }    }


}



// Renderizar apuestas
function renderTotalApuestas(totalApuestas) {
    let totalApuestasDiv = document.getElementById("totalApuestas");
    if (!totalApuestasDiv) {
        totalApuestasDiv = document.createElement("div");
        totalApuestasDiv.id = "totalApuestas";
        document.body.appendChild(totalApuestasDiv);
    }
    totalApuestasDiv.innerHTML = `<p>Total Apuestas en la Partida: ${totalApuestas} monedas</p>`;
}

      // Escuchar errores enviados desde el servidor
      socket.on("error", (error) => {
        console.error("Error recibido del servidor:", error);
      });

      // Manejar el envío del formulario de apuesta
      const betForm = document.getElementById("betForm");
       if (betForm) {
      betForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const monto = Number(document.getElementById("betAmount").value);
        // Emitir el evento 'realizarApuesta' con el monto introducido
        socket.emit("realizarApuesta", { roomId, monto, socketId: currentSocketId });
        // Opcional: ocultar el formulario de apuesta una vez enviada
        document.getElementById("apuestaContainer").style.display = "none";
      });
    }else {
        console.warn("El formulario de apuestas no existe todavía.");
    }
      // Escuchar el evento de iniciar cuenta desde el servidor
      socket.on("iniciarCuenta", (duracion) => {
        let timerDisplay = document.getElementById("timerDisplay");
        if (!timerDisplay) {
            timerDisplay = document.createElement("div");
            timerDisplay.id = "timerDisplay";
            document.body.appendChild(timerDisplay);
        }

        let fase = (duracion === 20) ? "apostar" : "unirse";
        let mensaje = (fase === "apostar")
            ? "Tiempo restante para apostar: "
            : "Tiempo restante para unirse: ";

        let segundosRestantes = duracion;
        timerDisplay.innerHTML = `${mensaje}${segundosRestantes} segundos.`;

        // Limpia cualquier countdown anterior
        if (window.countdownInterval) clearInterval(window.countdownInterval);

        window.countdownInterval = setInterval(() => {
            segundosRestantes--;
            if (segundosRestantes <= 0) {
                clearInterval(window.countdownInterval);
                // Solo actualiza el mensaje, NO elimines el timerDisplay aquí
                timerDisplay.innerHTML = (fase === "apostar")
                    ? "El tiempo para apostar ha finalizado."
                    : "El tiempo para unirse ha finalizado.";
            } else {
                timerDisplay.innerHTML = `${mensaje}${segundosRestantes} segundos.`;
            }
        }, 1000);
    });

      socket.on("cuentaFinalizada", (mensaje) => {
        let timerDisplay = document.getElementById("timerDisplay");
        if (!timerDisplay) {
            timerDisplay = document.createElement("div");
            timerDisplay.id = "timerDisplay";
            document.body.appendChild(timerDisplay);
        }
        timerDisplay.innerHTML = mensaje;
        // Elimina el temporizador después de 2 segundos
        setTimeout(() => {
            if (timerDisplay) timerDisplay.remove();
        }, 2000);
    });

socket.on("bloquearAcciones", (bloquear) => {
    // Bloquear botones de acción
    ["btnPedirCarta", "btnPlantarse", "joinGame"].forEach((btnId) => {
        const boton = document.getElementById(btnId);
        if (boton) boton.disabled = true;
    });

    // Bloquear o mostrar el formulario de apuestas
    const betForm = document.getElementById("betForm");
    if (betForm) betForm.style.display = bloquear ? "none" : "block";

    // Mostrar mensaje de bloqueo si aplica
    let mensajeBloqueo = document.getElementById("mensajeBloqueo");
    if (bloquear) {
        if (!mensajeBloqueo) {
            mensajeBloqueo = document.createElement("div");
            mensajeBloqueo.id = "mensajeBloqueo";
            mensajeBloqueo.textContent = "Esperando jugadores... La partida comenzará pronto.";
            document.body.appendChild(mensajeBloqueo);
        }
    } else {
        if (mensajeBloqueo) mensajeBloqueo.remove();
    }
});

// Gestionar botones de acción
function gestionarBotonesInterfaz(gameState) {
    const turnoActual = gameState.turnoActual;
    const jugadorEnTurno = gameState.state.jugadores[turnoActual];

    const esMiTurno = jugadorEnTurno.socketId === currentSocketId;
    const btnPedirCarta = document.getElementById("btnPedirCarta");
    const btnPlantarse = document.getElementById("btnPlantarse");
    const betForm = document.getElementById("betForm");
    if (btnPedirCarta && btnPlantarse) {
        btnPedirCarta.disabled = !esMiTurno || jugadorEnTurno.plant;
        btnPlantarse.disabled = !esMiTurno || jugadorEnTurno.plant;
    }

}

    socket.on("mostrarBotonUnirse", () => {
    renderizarBotonesInicio(currentUsername);
});

socket.on("info", (msg) => {
    alert(msg); 
});
    </script>
  </body>
</html>
