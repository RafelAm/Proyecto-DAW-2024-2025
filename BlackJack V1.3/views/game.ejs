


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/party.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lobster&display=swap"
      rel="stylesheet"
    />
    <title>Pruebas</title>
  </head>
  <body>
    <%- include('partials/header') %>
    <img class="tbl" src="/images/table.png" alt="Mesa de p√≥ker">
    <div class="mesa">
    </div>

    
    <!--<h1>Chat</h1>
    <ul id="messages"></ul>
    <form id="form" action="">
        <input id="input" autocomplete="off" />
        <button>Enviar</button>
    </form>-->
    <script src="/socket.io/socket.io.js"></script>
    <script>
const socket = io();
let gameStateGlobal;
let currentUsername = "";
// Actualizar el estado del juego
socket.on("gameState", (gameState) => {
      
      if (!gameState || !gameState.state) {
        console.error("Error: gameState no est√° definido correctamente.");
        return;
    }
    gameStateGlobal = gameState; // Guardamos el estado del juego globalmente
    currentSocketId = gameState.currentSocketId;
    currentUsername = gameState.currentUsername;

    renderGame(gameState);
    renderizarBotonesInicio(currentUsername);
});







// Mapeo de √≠conos de los palos (debe estar definido globalmente)
const iconosPalos = {
    "Corazones": "‚ô•",
    "Diamantes": "‚ô¶",
    "Treboles": "‚ô£",
    "Picas": "‚ô†"
};
const roomId = window.location.pathname.split("/").pop();
let botonesContainerGlobal = null;
let globalBotonesConfig = null;

socket.emit("joinRoom", roomId);
// Actualizar la lista de jugadores
socket.on("actualizarJugadores", (jugadores) => {
    const jugadoresLista = document.getElementById("jugadoresLista");
    jugadoresLista.innerHTML = "";

    jugadores.forEach(jugador => {
        const elemento = document.createElement("li");
        elemento.textContent = jugador;
        jugadoresLista.appendChild(elemento);
    });
});
socket.on("mostrarFormularioApuesta", () => {
    if (!gameStateGlobal || !gameStateGlobal.state) {
        console.error("Error: gameStateGlobal no est√° definido correctamente.");
        return;
    }
    if(gameStateGlobal.currentUsername == currentUsername && gameStateGlobal.state.jugadores){
        const jugadorActual = gameStateGlobal.state.jugadores.find(j => j.nombre === currentUsername);
        if (jugadorActual && jugadorActual.apuesta === 0) {
            gestionarFormularioApuesta(currentUsername);
        } else {
            console.warn("Jugador no encontrado en gameStateGlobal:", currentUsername);
        }


    }
});




// Mostrar botones de acci√≥n
socket.on("mostrarBotones", (botonesConfig) => {
    globalBotonesConfig = Array.isArray(botonesConfig) ? botonesConfig : []; // Asegurar que sea un array

    if (botonesContainerGlobal && globalBotonesConfig.length > 0) {
        renderizarBotones(globalBotonesConfig, botonesContainerGlobal, false);
    } else {
        console.warn("No se han recibido botones v√°lidos.");
    }
});



// Renderizar el formulario de apuesta
function renderizarFormularioApuesta(jugador) {
    // Verificar si ya existe el contenedor de apuesta
    let apuestaContainer = document.getElementById("apuestaContainer");
    
    if (!apuestaContainer) {
        apuestaContainer = document.createElement("div");
        apuestaContainer.id = "apuestaContainer";
        document.body.appendChild(apuestaContainer);
    }

    // Forzar visibilidad del formulario
    apuestaContainer.style.display = "block";

    apuestaContainer.innerHTML = `
        <form id="betForm">
            <input type="number" id="betAmount" placeholder="Ingrese su apuesta" required>
            <button type="submit">Apostar</button>
        </form>
    `;

    // üí° Evitar duplicados en event listeners eliminando eventos anteriores
    const betForm = document.getElementById("betForm");
    betForm?.removeEventListener("submit", handleBetSubmit);
    
    // Agregar event listener con el jugador correctamente definido
    betForm?.addEventListener("submit", (e) => handleBetSubmit(e, jugador), { once: true });
}



function gestionarFormularioApuesta(jugador) {
    renderizarFormularioApuesta(jugador)

    // üîπ Si despu√©s de 10 segundos no ha apostado, lo eliminamos
    setTimeout(() => {
        if (jugador.apuesta === 0) {
            socket.emit("expulsarJugador", { roomId: jugador.roomId, socketId: jugador.socketId });
            apuestaContainer.style.display = "none";
        }
    }, 10000);
}




  // Manejar el env√≠o del formulario de apuesta
function handleBetSubmit(e, usuario) {
    e.preventDefault();
    const monto = Number(document.getElementById("betAmount").value);

    if (monto > 0) {
        // Emitimos la apuesta primero
        socket.emit("realizarApuesta", { roomId, monto, socketId: currentSocketId });

        // Ahora s√≠ agregamos al jugador
        socket.emit("addPlayer", { roomId, username: usuario, socketId: currentSocketId });

        // Ocultar el formulario despu√©s de apostar
        document.getElementById("apuestaContainer").style.display = "none";
    } 
}

// Renderizar el juego
// Llamar a la funci√≥n de gesti√≥n dentro de `renderGame`
function renderGame(gameState) {
  
  console.log("Estado del juego recibido:", gameState);
    const mesa = document.querySelector(".mesa");
    mesa.innerHTML = "";

    gameState.state.jugadores.forEach((jugador) => {
        const silla = document.createElement("div");
        silla.classList.add(jugador.tipo);
        
        silla.innerHTML = `
            <div class="info">
                <div class="personal-container">
                    <p class="name">${jugador.nombre}</p>
                    <img src="${jugador.tipo === 'Crupier' ? '/images/dealer.png' : '/images/default-user.png'}" alt="${jugador.tipo}" class="img-${jugador.tipo}">
                </div>
                <p class="puntos">Puntos: ${jugador.puntaje}</p>
                ${jugador.tipo === "Player" ? `<p class="apuesta">Apuesta: ${jugador.apuesta} monedas</p>` : ""}
            </div>
            <div class="cartas"></div>
        `;

        const cartasContainer = silla.querySelector(".cartas");
        jugador.cartas.forEach((carta, index) => {
            const card = document.createElement("div");
            card.classList.add("cards");

            // Si el jugador es el usuario actual, muestra todas sus cartas
            if (jugador.socketId === currentSocketId) {
                card.textContent = `${carta.numero} ${iconosPalos[carta.palo]}`;
            }
            // Si es el crupier, solo muestra la primera carta
            else if (jugador.tipo === "Crupier" && index === 0) {
                card.textContent = `${carta.numero} ${iconosPalos[carta.palo]}`;
            }
            // Oculta las cartas de los dem√°s jugadores
            else {
                card.textContent = "‚ùì";
            }

            cartasContainer.appendChild(card);
        });


        if (jugador.tipo === "Player" && jugador.nombre === currentUsername) {
            let botonesContainer = silla.querySelector(".botones-container");
            if (!botonesContainer) {
                botonesContainer = document.createElement("div");
                botonesContainer.classList.add("botones-container");
                silla.appendChild(botonesContainer);
            }
            botonesContainerGlobal = botonesContainer;
            renderizarBotones(["btnPedirCarta", "btnPlantarse"], botonesContainerGlobal, jugador.plant);
        }

        mesa.appendChild(silla);
    });
    
    renderTotalApuestas(gameState.state.totalApuestas);
    gestionarBotonesInterfaz(gameState);
}
function renderizarBotones(botonesConfig, container, deshabilitado = false) {
    container.innerHTML = "";

    // Validaci√≥n: Si `botonesConfig` no es un array, asignamos botones por defecto
    const botones = Array.isArray(botonesConfig) ? botonesConfig : ["btnPedirCarta", "btnPlantarse"];

    botones.forEach((btnId) => {
        const button = document.createElement("button");

        switch (btnId) {
            case "btnPedirCarta":
                button.textContent = "Pedir Carta";
                button.id = "btnPedirCarta";
                button.classList.add("more");
                button.addEventListener("click", () => socket.emit("requestCard", { roomId }));
                break;
            case "btnPlantarse":
                button.textContent = "Plantarse";
                button.id = "btnPlantarse";
                button.classList.add("plant");
                button.addEventListener("click", () => socket.emit("plantarse", { roomId }));
                break;
            default:
                console.warn("Identificador de bot√≥n no reconocido:", btnId);
                button.textContent = "Bot√≥n desconocido";
        }

        if (deshabilitado) {
            button.setAttribute("disabled", true);
        }
        container.appendChild(button);
    });
}


// Renderizar botones de inicio (antes de entrar a la partida)
function renderizarBotonesInicio(usuario) {
    let container = document.getElementById("botonesInicio");

    // Si no existe el elemento, cr√©alo antes de modificarlo
    if (!container) {
        container = document.createElement("div");
        container.id = "botonesInicio";
        document.body.appendChild(container);
            container.innerHTML = ""; // Limpia el contenido previo

    let botonesConfig1 = ["btnUnirsePartida"];

    botonesConfig1.forEach((btnId) => {
        const button = document.createElement("button");

        switch (btnId) {
            case "btnUnirsePartida":
                button.textContent = "Unirse a la partida";
                button.classList.add("joinGame");
                button.addEventListener("click", () => {
                    socket.emit("addPlayer", { roomId, username: usuario, socketId: currentSocketId });
                    button.style.display = "none"; // Oculta el bot√≥n tras unirse
                });
                break;
        }

        container.appendChild(button);
    });
    }


}



// Renderizar apuestas
function renderTotalApuestas(totalApuestas) {
    let totalApuestasDiv = document.getElementById("totalApuestas");
    if (!totalApuestasDiv) {
        totalApuestasDiv = document.createElement("div");
        totalApuestasDiv.id = "totalApuestas";
        document.body.appendChild(totalApuestasDiv);
    }
    totalApuestasDiv.innerHTML = `<p>Total Apuestas en la Partida: ${totalApuestas} monedas</p>`;
}

      // Escuchar errores enviados desde el servidor
      socket.on("error", (error) => {
        console.error("Error recibido del servidor:", error);
      });

      // Manejar el env√≠o del formulario de apuesta
      const betForm = document.getElementById("betForm");
       if (betForm) {
      betForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const monto = Number(document.getElementById("betAmount").value);
        // Emitir el evento 'realizarApuesta' con el monto introducido
        socket.emit("realizarApuesta", { roomId, monto, socketId: currentSocketId });
        // Opcional: ocultar el formulario de apuesta una vez enviada
        document.getElementById("apuestaContainer").style.display = "none";
      });
    }else {
        console.warn("El formulario de apuestas no existe todav√≠a.");
    }
      // Escuchar el evento de iniciar cuenta desde el servidor
      socket.on("iniciarCuenta", (duracion) => {
        // Crea o consigue el elemento donde mostrar la cuenta atr√°s
        let timerDisplay = document.getElementById("timerDisplay");
        if (!timerDisplay) {
          timerDisplay = document.createElement("div");
          timerDisplay.id = "timerDisplay";

          document.body.appendChild(timerDisplay);
        }

        // Inicializa el contador
        let segundosRestantes = duracion;
        timerDisplay.innerHTML = `Tiempo restante para unirse: ${segundosRestantes} segundos.`;

        const countdown = setInterval(() => {
          segundosRestantes--;
          if (segundosRestantes <= 0) {
            clearInterval(countdown);
            timerDisplay.innerHTML = "El tiempo para unirse ha finalizado.";
            setTimeout(() => {
              timerDisplay.remove();
            }, 2000); // Elimina el mensaje despu√©s de 5 segundos
          } else {
            timerDisplay.innerHTML = `Tiempo restante para unirse: ${segundosRestantes} segundos.`;
          }
        }, 1000);
      });

      socket.on("cuentaFinalizada", (mensaje) => {
        let timerDisplay = document.getElementById("timerDisplay");
        if (!timerDisplay) {
          timerDisplay = document.createElement("div");
          timerDisplay.id = "timerDisplay";
          document.body.appendChild(timerDisplay);
        }
        timerDisplay.innerHTML = mensaje;
      });

socket.on("bloquearAcciones", (bloquear) => {
    // Bloquear botones de acci√≥n
    ["btnPedirCarta", "btnPlantarse", "joinGame"].forEach((btnId) => {
        const boton = document.getElementById(btnId);
        if (boton) boton.disabled = true;
    });

    // Bloquear o mostrar el formulario de apuestas
    const betForm = document.getElementById("betForm");
    if (betForm) betForm.style.display = bloquear ? "none" : "block";

    // Mostrar mensaje de bloqueo si aplica
    let mensajeBloqueo = document.getElementById("mensajeBloqueo");
    if (bloquear) {
        if (!mensajeBloqueo) {
            mensajeBloqueo = document.createElement("div");
            mensajeBloqueo.id = "mensajeBloqueo";
            mensajeBloqueo.textContent = "Esperando jugadores... La partida comenzar√° pronto.";
            document.body.appendChild(mensajeBloqueo);
        }
    } else {
        if (mensajeBloqueo) mensajeBloqueo.remove();
    }
});

// Gestionar botones de acci√≥n
function gestionarBotonesInterfaz(gameState) {
    const turnoActual = gameState.turnoActual;
    const jugadorEnTurno = gameState.state.jugadores[turnoActual];

    const esMiTurno = jugadorEnTurno.socketId === currentSocketId;
    const btnPedirCarta = document.getElementById("btnPedirCarta");
    const btnPlantarse = document.getElementById("btnPlantarse");
    const betForm = document.getElementById("betForm");
    if (btnPedirCarta && btnPlantarse) {
        btnPedirCarta.disabled = !esMiTurno || jugadorEnTurno.plant;
        btnPlantarse.disabled = !esMiTurno || jugadorEnTurno.plant;
    }

}

    </script>
  </body>
</html>
